package ru.stqa.pft.sandbox;

// класс для определения простоты целого числа

public class Primes {

  // функция принимающая на вход число n
  // цикл через for
  public static boolean isPrimeFor(int n) {
    // описываем переменную счетчик
    // 1 - инициализация счетчика
    // 2 - указываем где он должен остановиться
    // 3 - то, что происходит с переменной счетчика на каждой итерации
    for (int i = 2; i < n; i++) {
      // описываем тело цикла, те действия, которые должны происходить на каждой итерации
      if (n %  i == 0) {
        return false;
      }
    }
    return true;
  }

  // цикл через while
  public static boolean isPrimeWhile(int n) {
    // 1 - инициализация счетчика
    int i = 2;
    // 2 - проверка окончания
    while (i < n && n %  i != 0) {
      // 3 - увеличение счетчика
      i++;
    }
   return i == n;
  }

  // long - 64 битовые числа
  public static boolean isPrime(long n) {
    // 1 - инициализация счетчика
    int i = 2;
    // 2 - проверка окончания
    while (i < n && n %  i != 0) {
      // 3 - увеличение счетчика
      i++;
    }
    return i == n;
  }

  // модификация функции; делим не на все числа, которые меньше, чем n, а достаточно делить только на половину чисел
  public static boolean isPrimeFast(int n) {
    int m = (int) Math.sqrt(n);
    for (int i = 2; i < m; i++) {
      // описываем тело цикла, те действия, которые должны происходить на каждой итерации
      if (n %  i == 0) {
        return false;
      }
    }
    return true;
  }
}